// The following collection of functions are inteded to help locate the 
// desired decodedSnippetText among a range on web layouts.

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // replacing the entire matched string
}

function alphabeticOnly(string) {
  return string.replace(/[^a-zA-Z]/g, '');
}

function getClosestMatchIndex(haystack, needle) {
  const needleLength = needle.length;
  let minDistance = Number.MAX_VALUE;
  let closestMatchIndex = -1;

  for (let i = 0; i < haystack.length - needleLength + 1; i++) {
    let distance = 0;

    for (let j = 0; j < needleLength; j++) {
      if (haystack[i + j] !== needle[j]) {
        distance++;
      }
    }

    if (distance < minDistance) {
      minDistance = distance;
      closestMatchIndex = i;
    }
  }

  return closestMatchIndex;
}

function scrollToSnippet(encodedSnippetText, index) {
  console.log("scrollToSnippet is running");    // console log
  const decodedSnippetText = decodeURIComponent(encodedSnippetText);
  console.log("decodedSnippetText: ", decodedSnippetText);    // console log

  function waitForSnippet() {
    const found = findSnippetAndScroll(decodedSnippetText, index);
    if (!found) {
      setTimeout(waitForSnippet, 500);
    }
  }

  waitForSnippet();
}

function findSnippetAndScroll(decodedSnippetText, index) {
  console.log("findSnippetAndScroll is running");   // console log
  const searchText = alphabeticOnly(decodedSnippetText.toLowerCase());
  const bodyText = document.body.innerText.toLowerCase();
  const targetIndex = getClosestMatchIndex(bodyText, searchText);
  console.log("searchText: %s, bodyText: %s, targetIndex: %s", searchText, bodyText, targetIndex);    // console log

  if (targetIndex !== -1) {
    const textBeforeSnippet = bodyText.slice(0, targetIndex);
    const wordsBeforeSnippet = textBeforeSnippet.split(/\s+/);
    const nodeIterator = document.createNodeIterator(
      document.body,
      NodeFilter.SHOW_TEXT,
      null
    );

    let wordCount = 0;
    let currentNode;
    while ((currentNode = nodeIterator.nextNode()) && wordCount < wordsBeforeSnippet.length) {
      const nodeText = currentNode.textContent;
      const nodeWords = nodeText.split(/\s+/);
      wordCount += nodeWords.length;

      if (wordCount >= wordsBeforeSnippet.length) {
        currentNode.parentElement.scrollIntoView({ behavior: 'smooth', block: 'center' });

        // Highlight the found snippet text
        const highlighted = document.createElement('mark');
        highlighted.style.backgroundColor = 'yellow';
        currentNode.parentElement.replaceChild(highlighted, currentNode);
        highlighted.appendChild(currentNode);

        return true; // Found and scrolled to the snippet
      }
    }
  }

  return false; // Snippet not found
}

// End scroll helper function collection.
